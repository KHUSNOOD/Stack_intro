***********Stacks intro code using Array*****************************

#include<iostream>
using namespace std;
struct stack{
    int size;
    int top;
    int *s;
    
};
void create(struct stack *st){
    cout<<"Enter the size";
    cin>>st->size;
    st->top=-1;
    st->s=new int [st->size];
}
void display(struct stack *st){
    for(int i=st->top; i>=0; i--){
        cout<<st->s[i]<<" ";
    }
    cout<<endl;
}
void push(struct stack *st,int x){
    if(st->top==st->size-1){
        cout<<"Stack overfolw"<<endl;
    }
    else{
        st->top++;
        st->s[st->top]=x;
    }
}
int pop(struct stack *st){
    int x=-1;
    if(st->top=-1){
        cout<<"Stack underflow"<<endl;
    }
    else{
        x=st->s[st->top];
        st->top--;
    }
    return x;
}
int main(){
    struct stack st;
    create(&st);
    push(&st,12);
    push(&st,2);
    push(&st,102);
    push(&st,120);
    display(&st);
    return 0;
}

***************Stack using linked list**************

#include<iostream>
 using namespace std;
 struct node{
     int data;
     struct node *next;
 };
 struct node *top=NULL; // Top is equal to first in linked list;
 void push(int x){
     struct node *t;
     t=new node;
     if(t==NULL){
         cout<<"Stack overflow"<<endl;
     }
     else{
         t->data=x;
         t->next=top;
         top=t;
         
     }
 }
 int pop(){
     int x=-1;
     struct node *t;
     t=new node;
     if(top==NULL){
         cout<<"Stack underflow"<<endl;
     }
     else{
         t=top;
         top=top->next;
         x=t->data;
         delete(t);
     }
     return x;
 }
 void display(){
     struct node *p;
     p=top;
     while(p!=NULL){
         cout<<p->data<<" ";
         p=p->next;
     }
 }
 int main(){
     push(12);
      push(1);
       push(120);
        push(102);
         push(142);
          push(12);
           push(162);
           //pop();
           display();
     
     return 0;
 }
